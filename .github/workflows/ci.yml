name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Decode keystore file
        run: |
          mkdir -p keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore/releasekey.jks

      - name: Decode Secret file
        run: echo "${{ secrets.SECRET_FILE }}" | base64 --decode > buildSrc/src/main/java/Secret.kt

      - name: Run Detekt
        run: ./gradlew detektAll --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [ 29 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Decode keystore file
        run: |
          mkdir -p keystore
          echo "${{ secrets.DEBUG_KEYSTORE_FILE }}" | base64 --decode > keystore/debug.keystore

      - name: Decode Secret file
        run: echo "${{ secrets.SECRET_FILE }}" | base64 --decode > buildSrc/src/main/java/Secret.kt

      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        env:
          CI: true
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -wipe-data -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedDevUitestAndroidTest --no-daemon

  upload-artifact:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [ check, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Decode keystore file
        run: |
          mkdir -p keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore/releasekey.jks

      - name: Decode Secret file
        run: echo "${{ secrets.SECRET_FILE }}" | base64 --decode > buildSrc/src/main/java/Secret.kt

      - name: Build signed release APK
        run: bash ./gradlew assembleRelease --no-daemon

      - name: Generate file name environment variable
        run: |
          VERSION=$(grep -oP 'versionName = "\K[^"]+' buildSrc/src/main/java/Config.kt)
          DATE=$(date +'%d.%m.%Y_%H-%M')
          BRANCH=${GITHUB_REF##*/}
          FILE_NAME="RickAndMorty-v${VERSION}_${BRANCH}-${DATE}"
          echo "RELEASE_FILE_NAME=$FILE_NAME" >> $GITHUB_ENV

      - name: Rename APK
        run:
          mv "./app/build/outputs/apk/prod/release/app-prod-release.apk" "./app/build/outputs/apk/prod/release/${{ env.RELEASE_FILE_NAME }}.apk"

      - name: Upload APK to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_FILE_NAME }}
          path: app/build/outputs/apk/prod/release/${{ env.RELEASE_FILE_NAME }}.apk

  upload-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [ check, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Decode keystore file
        run: |
          mkdir -p keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore/releasekey.jks

      - name: Decode Secret file
        run: echo "${{ secrets.SECRET_FILE }}" | base64 --decode > buildSrc/src/main/java/Secret.kt

      - name: Build signed release APK
        run: bash ./gradlew assembleRelease --no-daemon

      - name: Generate file name environment variable
        run: |
          VERSION=$(grep -oP 'versionName = "\K[^"]+' buildSrc/src/main/java/Config.kt)
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          FILE_NAME="RickAndMorty-v${VERSION}"
          echo "RELEASE_FILE_NAME=$FILE_NAME" >> $GITHUB_ENV

      - name: Rename APK
        run:
          mv "./app/build/outputs/apk/prod/release/app-prod-release.apk" "./app/build/outputs/apk/prod/release/${{ env.RELEASE_FILE_NAME }}.apk"

      - name: Upload APK to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          name: "Release ${{ env.RELEASE_VERSION }}"
          files: app/build/outputs/apk/prod/release/${{ env.RELEASE_FILE_NAME }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts to GitHub Packages
        run: ./gradlew publish
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
